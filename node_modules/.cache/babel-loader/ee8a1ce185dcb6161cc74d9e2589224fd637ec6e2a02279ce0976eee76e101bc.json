{"ast":null,"code":"var _jsxFileName = \"/Users/dodricsykes/Coding Projects/Projects/react-projects/note_taking_react/src/Header.js\";\nimport React from \"react\";\n\n// Function purpose (why): Want to target the page header, \"new note\" button and search bar (along with the content going inside it)\nconst Header = props => {\n  const updateSearch = e => {\n    // \"e\" is used because we want to receive the \"event\" and use its data to fulfill the code inside the method/function\n    const updatedSearch = e.target.value;\n    // ^ is used to grab the value of the event triggered, that the user enters or selects in the form element that triggered the event. It assigns this value to the variable `updatedSearch` so that we can use it in our code for further processing or updating the UI.\n    props.onSearch(updatedSearch); // Calls the onSearch event handler/function, passed to it via props from the Header component (located within the App component, using the \"updatedSearch\" variable as an argument/parameter\n  };\n  return /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"app-header__title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, \"Super Sticky Notes\"), /*#__PURE__*/React.createElement(\"aside\", {\n    className: \"app-header__controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"add-new\",\n    onClick: props.addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, \"+ New Note\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    onChange: updateSearch // onChange is the event listener and will active when the event is triggered (when text is entered into the search bar in this instance) -> when triggered, the event listener will call on the \"updateSearch\" event handler/function, subsquently calling the 'onSearch\" function in the App component\n    ,\n    value: props.seachText // This attribute will hold the value of searchText that was passed via props from the App component.\n    ,\n    placeholder: \"Type here to search...\",\n    className: \"search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  })))\n\n  // What the above code is doing: In the Header.js module, define a Header functional component that returns a piece of the JSX from the original, single App component you built in the last step.\n  // What the above code is doing: Copy and paste the JSX for the header from the App component into the Header component. Then export the Header component.\n  // Addressing \"onClick\" (the event listener) and \"props.addNote\" -> Use props to pass a reference to the addNote event handler method from App to the button element’s onClickevent listener\n  // ^ Additional info regarding the onClick event listener: By using props to pass down the `addNote` method, you enable the child component to trigger the `addNote` method when a specific event (in this case, the click event on the button) occurs.\n  // ^ Additional info regarding the onClick event listener: Here is a breakdown of how this works: 1. The `addNote` method is defined in the App component. 2. The `addNote` method is passed down to a child component as a prop. 3. In the child component, the `addNote` method is accessed through `props`. 4. When the button in the child component is clicked, the `addNote` method is invoked. This way, you establish communication between the parent and child components in React, allowing the child component to trigger actions defined in the parent component.\n  ;\n};\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","Header","props","updateSearch","e","updatedSearch","target","value","onSearch","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","addNote","type","onChange","seachText","placeholder","_c","$RefreshReg$"],"sources":["/Users/dodricsykes/Coding Projects/Projects/react-projects/note_taking_react/src/Header.js"],"sourcesContent":["import React from \"react\";\n\n// Function purpose (why): Want to target the page header, \"new note\" button and search bar (along with the content going inside it)\nconst Header = (props) => {\n  const updateSearch = (e) => {\n    // \"e\" is used because we want to receive the \"event\" and use its data to fulfill the code inside the method/function\n    const updatedSearch = e.target.value;\n    // ^ is used to grab the value of the event triggered, that the user enters or selects in the form element that triggered the event. It assigns this value to the variable `updatedSearch` so that we can use it in our code for further processing or updating the UI.\n    props.onSearch(updatedSearch); // Calls the onSearch event handler/function, passed to it via props from the Header component (located within the App component, using the \"updatedSearch\" variable as an argument/parameter\n  };\n\n  return (\n    <header>\n      <h1 className=\"app-header__title\">Super Sticky Notes</h1>\n      <aside className=\"app-header__controls\">\n        <button className=\"add-new\" onClick={props.addNote}>\n          + New Note\n        </button>\n        <input\n          type=\"text\"\n          onChange={updateSearch} // onChange is the event listener and will active when the event is triggered (when text is entered into the search bar in this instance) -> when triggered, the event listener will call on the \"updateSearch\" event handler/function, subsquently calling the 'onSearch\" function in the App component\n          value={props.seachText} // This attribute will hold the value of searchText that was passed via props from the App component.\n          placeholder=\"Type here to search...\"\n          className=\"search\"\n        />\n      </aside>\n    </header>\n\n    // What the above code is doing: In the Header.js module, define a Header functional component that returns a piece of the JSX from the original, single App component you built in the last step.\n    // What the above code is doing: Copy and paste the JSX for the header from the App component into the Header component. Then export the Header component.\n    // Addressing \"onClick\" (the event listener) and \"props.addNote\" -> Use props to pass a reference to the addNote event handler method from App to the button element’s onClickevent listener\n    // ^ Additional info regarding the onClick event listener: By using props to pass down the `addNote` method, you enable the child component to trigger the `addNote` method when a specific event (in this case, the click event on the button) occurs.\n    // ^ Additional info regarding the onClick event listener: Here is a breakdown of how this works: 1. The `addNote` method is defined in the App component. 2. The `addNote` method is passed down to a child component as a prop. 3. In the child component, the `addNote` method is accessed through `props`. 4. When the button in the child component is clicked, the `addNote` method is invoked. This way, you establish communication between the parent and child components in React, allowing the child component to trigger actions defined in the parent component.\n  );\n};\n\nexport default Header;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,MAAM,GAAIC,KAAK,IAAK;EACxB,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1B;IACA,MAAMC,aAAa,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IACpC;IACAL,KAAK,CAACM,QAAQ,CAACH,aAAa,CAAC,CAAC,CAAC;EACjC,CAAC;EAED,oBACEL,KAAA,CAAAS,aAAA;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACEf,KAAA,CAAAS,aAAA;IAAIO,SAAS,EAAC,mBAAmB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,oBAAsB,CAAC,eACzDf,KAAA,CAAAS,aAAA;IAAOO,SAAS,EAAC,sBAAsB;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACrCf,KAAA,CAAAS,aAAA;IAAQO,SAAS,EAAC,SAAS;IAACC,OAAO,EAAEf,KAAK,CAACgB,OAAQ;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,YAE5C,CAAC,eACTf,KAAA,CAAAS,aAAA;IACEU,IAAI,EAAC,MAAM;IACXC,QAAQ,EAAEjB,YAAa,CAAC;IAAA;IACxBI,KAAK,EAAEL,KAAK,CAACmB,SAAU,CAAC;IAAA;IACxBC,WAAW,EAAC,wBAAwB;IACpCN,SAAS,EAAC,QAAQ;IAAAN,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACnB,CACI,CACD;;EAER;EACA;EACA;EACA;EACA;EAAA;AAEJ,CAAC;AAACQ,EAAA,GA/BItB,MAAM;AAiCZ,eAAeA,MAAM;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}